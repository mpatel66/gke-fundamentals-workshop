# The Role or ClusterRole represents a set of permissions. Permissions are additive - you cannot deny
# Here we're allowing the pods to do a list operation. We find that the pod crashes on startup because
# we have not added "patch" to the rules.
kind: Role
apiVersion: rbac.authorization.k8s.io/v1 # This is the API group that drives authorization.
metadata:
  name: pod-labeler
  namespace: doit-lab-16
rules:
  - apiGroups: [""] # "" refers to the core API group
    resources: ["pods"]
    verbs: ["list"] # "patch" is intentionally omitted for troubleshooting (see README)

---
# Create a ServiceAccount that will be bound to the role above
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pod-labeler
  namespace: doit-lab-16

---
# Binds the pod-labeler ServiceAccount to the pod-labeler Role
# Any pod using the pod-labeler ServiceAccount will be granted
# API permissions based on the pod-labeler role.

# Here were bind the permissions to a particular ServiceAccount.
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-labeler
  namespace: doit-lab-16
subjects:
  # List of service accounts or users to bind
  - kind: ServiceAccount
    name: pod-labeler
roleRef:
  # The role to bind. This is the Role we defined above.
  kind: Role
  name: pod-labeler # This is the name of the Role defined above.
  apiGroup: rbac.authorization.k8s.io

---
# Deploys a single pod to run the pod-labeler code
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod-labeler
  namespace: doit-lab-16
spec:
  replicas: 1

  # Control any pod labeled with app=pod-labeler
  selector:
    matchLabels:
      app: pod-labeler

  template:
    # Ensure created pods are labeled with app=pod-labeler to match the deployment selector
    metadata:
      labels:
        app: pod-labeler

    spec:
      # Set the serviceAccount so RBAC rules apply
      serviceAccount: pod-labeler
      containers:
        - image: lstiebeldoit/pod-labeler:1.6.0
          name: pod-labeler
